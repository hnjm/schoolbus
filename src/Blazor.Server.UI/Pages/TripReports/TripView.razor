@inject IStringLocalizer<TripReports> L
@page "/pages/tripview/{id:int}"
@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant;
@using CleanArchitecture.Blazor.Application.Features.TripReports.Commands.AddEdit;
@using CleanArchitecture.Blazor.Application.Features.TripReports.DTOs;
@using CleanArchitecture.Blazor.Application.Features.TripReports.Queries.GetById;
@using CleanArchitecture.Blazor.Application.Services.DataServices;
@inherits FluxorComponent
@attribute [Authorize(Policy = Permissions.TripReports.MyTripView)]
<div class="main">
    <MudContainer MaxWidth="MaxWidth.Small">

        @if (trip is null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-0 my-0" />
        }
        else
        {
            @if (trip.Status == TripStatus.Runing)
            {
                <DeviceScanner Trip="@trip" UserProfile="@UserProfile"></DeviceScanner>
            }
            else
            {
                <TripReportInfomation Trip="@trip" UserProfile="@UserProfile"></TripReportInfomation>
            }

        }



    </MudContainer>
</div>

<MudAppBar Bottom="true" Class="justify-center gap-2" Fixed="true" Color="Color.Primary" Elevation="1">
    <MudSpacer />
    <MudTooltip Text="@L["Home"]">
        <MudIconButton Icon="@Icons.Material.Filled.Home" Class="mx-1" Size="Size.Large" Color="Color.Inherit" Edge="Edge.End" Href="/pages/mytrip" />
    </MudTooltip>
    <MudSpacer />
</MudAppBar>
@code {
    [Parameter]
    public int id { get; set; }
    MudForm? _form;
    bool _saving;
    bool _loading = false;
    [Inject]
    private IState<UserProfileState> UserProfileState { get; set; } = null!;
    private UserProfile UserProfile => UserProfileState.Value.UserProfile;
    TripReportDto? trip;

    [Inject] private IMediator _mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        trip = await _mediator.Send(new GetTripReportByIdQuery() { Id = id });
    }

}
